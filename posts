#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Start new post (opening in Vim)
"""

from __future__ import print_function
import re
import os
import glob
from datetime import datetime


TEMPLATE = """Title: {title}
Date: {date}
Author: Elias Dorneles
Status: draft

Write here...
"""

POSTS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'site', 'blog')


def _gen_article_filename(title):
    from slugify import slugify
    slug = slugify(title)
    return os.path.join(POSTS_DIR, '%s.md' % slug)


def new_post():
    title = "New Blog Post"
    date = datetime.now().strftime('%Y-%m-%d %H:%M')
    snippet = TEMPLATE.format(title=title, date=date)

    filename = _gen_article_filename(title)

    with open(filename, 'w') as f:
        f.write(snippet)

    print('Opening file: %s' % filename)
    os.execvp('vim', ['vim', '+6', filename])


def _parse_metadata(article):
    """This is ugly and hacky, but seems to work for now"""
    meta = {}
    for line in article:
        line = line.strip()
        m = re.match('[a-zA-Z]+: .*', line)
        if m:
            key, value = line.split(': ', 1)
            meta[key.lower()] = value
        else:
            break
    return meta


def _find_drafts_needing_renaming():
    for article_path in glob.glob(os.path.join(POSTS_DIR, '*')):
        with open(article_path) as f:
            meta = _parse_metadata(f)
        assert 'title' in meta
        expected_filename = _gen_article_filename(meta['title'])
        if meta.get('status') == 'draft' and expected_filename != article_path:
            yield article_path, expected_filename


def rename_drafts():
    for old_filepath, new_filepath in _find_drafts_needing_renaming():
        print('Will move {} to {}'.format(old_filepath, new_filepath))
        os.rename(old_filepath, new_filepath)


ACTIONS_MAP = {
    'new': new_post,
    'rename-drafts': rename_drafts,
}


def run(args):
    if args.action in ACTIONS_MAP:
        ACTIONS_MAP[args.action]()
    else:
        raise ValueError("Don't know how to handle action: %s" % args.action)


if '__main__' == __name__:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('action', choices=ACTIONS_MAP)

    args = parser.parse_args()
    run(args)
