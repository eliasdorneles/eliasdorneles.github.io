Template engine -- jinja2 syntax to support:

Template engine -- needed features:
[x] {{ variable }} replaces content in variable
[x] {{ variable.something.child }} replaces content in variable child
[x] {{ variable.isoformat() }} implements date isoformat
[x] {{ variable.strftime("%Y, %B %d") }} implements date strftime
[x] {{ variable.something|striptags }} implements striptags
    => let's just bypass it for now, none of my articles have HTML on them
[x] {{ lang_display_name(translation.lang) }}
[x] If: {% if article.something %} {% else %} {% endif %}
[x] For: {% for it1 in LIST %} {% endfor %}
[x] Nested for: {% for li in LIST_of_lists %}{% for x in li}{{ x}}{% endfor %}{% endfor %}
[x] refactor: use json.Value and json.Object instead of custom Value and Context types
[x] Add remaining if conditions
    [x] {% if page is defined and url == page.url %}
    [x] {% if article.content != article._summary %}
    [x] {% if page is defined and it.url == page.url %}
[x] set: {% set rel_source_path = 'site/' + article.source_path.split('/site/')[1] %}
      -> no need to implement set statement, implement it directly in the tool
[x] Includes: {% include 'FILENAME' %}
    [x] support nested includes
[x] Blocks: {% block NAME %}  {% endblock %}
[x] Extends: {% extends "FILENAME" %}


Useful shell commands
---------------------

Find all expressions:
rg -o '[{][{][^{]*[}]' mytheme/ | cut -d: -f2 | sort | uniq

Find all commands:
rg -o '[{][%][^{]*[}]' mytheme/ | cut -d: -f2 | sort | uniq

Find all variables:
rg -o '[{][{%][^{]*[}]' mytheme/ | cut -d: -f2 | sort | uniq | grep -v include | grep -v extends | grep -v block | grep -v endfor | grep -v endif | grep -v else

Site generator
##############

main logic:
-----------
[x] build global context
[x] articles := sort articles in site/blog/* by date
[x] setup template env to load any template
[x] for each article, in date desc order:
[x]     load article metadata and MD source
[x]     render article content from MD to HTML
    [x] fix missing GH syntax
    [x] fix image MD syntax inside <center> tag
        found a WORKAROUND: add blank line after <center> tag
            => this breaks in Pelican though
[x]     create local context
[x]     render into HTML content using the Jinja template
    [x] fix bug expression inside child block w/ double {{{{
    [x] fix bug dates incorrect format and TZ
    [x] add relative source path variable
    [x] add highlightjs to replace pygments: https://highlightjs.org/
[x] generate index page
    [x] build articles_page object, with object_list with list of articles
    [x] generate summary for every article
        [x] either stop at PELICAN_END_SUMMARY, or SUMMARY_MAX_LENGTH
        [x] clean summary: remove any images after the 1st one
[x] generate pages w/ similar logic, except no feed
[x] implement translations: should group articles w/ same slug, display
    only articles in English by default and in each article, display a link
    to the alternative translations
[x] fix CMark GFM usage to use table extension
[x] Copy site/images/ OUTPUT_DIR/images/
[x] Copy theme static files ./mytheme/static/*/** to OUTPUT_DIR/theme/*/**
[x] Copy CNAME file
[x] implement proper relative urls, for better local preview
[x] fix issue with incorrect image and weird path for "post pycon blues" article

It's all done!!! Yayyy! ðŸŽ‰

Manage Tool
===========

[ ] fix auto-rename-drafts feature which doesn't seem to be working

Template Engine Improvements
############################

Architecture improvements:
--------------------------
[x] Refactor parser: Split into separate tokenizer + parser stages
    - Tokenizer: convert raw text to tokens (TEXT, EXPRESSION, STATEMENT, etc.)
    - Parser: handle token stream with proper state management
    - Benefits: cleaner code, better error handling, easier testing

[ ] Implement Expression AST system:
    - Replace hardcoded eval_expr with proper AST nodes
    - Add operator precedence handling (comparison, logical, arithmetic)
    - Support for filters (|filter_name), function calls, array/object access
    - Benefits: more flexible expressions, better error messages

[ ] Add comprehensive error reporting:
    - Track line numbers and column positions during parsing
    - Provide specific error messages with context
    - Include template name in error messages
    - Benefits: much easier debugging for template authors

[ ] Enhance filter system:
    - Replace hardcoded |striptags with proper filter chain
    - Add common filters: truncate, upper, lower, date formatting
    - Make filters extensible via function registry
    - Benefits: more Jinja2 compatibility, easier to extend

[ ] Testing and validation:
    - Add benchmarking tests for performance regression detection
    - Add fuzzing tests for parser robustness
    - Template validation (undefined variables, missing includes)
    - Benefits: more reliable, maintainable code

[ ] Advanced features:
    - Macro definitions and calls
    - Template variables via {% set var = value %}
    - More loop variables (loop.index, loop.first, loop.last)
    - Template comments {# comment #}
    - Include with context passing
    - Benefits: full Jinja2 feature parity

[ ] Improve memory management:
    - Reduce temp_allocator usage, use proper cleanup
    - Pool string builders and reusable data structures
    - Add memory usage tracking/limits
    - Benefits: better performance, predictable memory usage

Performance optimizations:
-------------------------
[ ] Optimize string operations:
    - Use string interning for repeated template names/variables
    - Pre-allocate builders with estimated sizes
    - Reduce string allocations in hot paths

[ ] Template inheritance optimization:
    - Cache resolved inheritance chains
    - Avoid re-parsing parent templates
    - Lazy block resolution

Code quality improvements:
-------------------------
[ ] Add proper documentation:
    - Document all public procedures and data structures
    - Add usage examples for each feature
    - Performance characteristics and memory usage docs

[ ] Improve test coverage:
    - Add edge case tests (malformed templates, deep nesting)
    - Integration tests with real template files
    - Error condition testing
